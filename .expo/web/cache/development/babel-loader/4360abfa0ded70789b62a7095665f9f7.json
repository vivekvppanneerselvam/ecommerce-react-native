{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { login } from \"../../modules/serverCall\";\nexport var postToken = function postToken(email, password) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: POST_TOKEN_BEGIN\n            });\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(login(email, password).then(function (res) {\n              console.log('tokenAction res', res);\n              dispatch({\n                type: POST_TOKEN_SUCCESS,\n                payload: res\n              });\n              return res;\n            }).catch(function (error) {\n              dispatch({\n                type: POST_TOKEN_FAIL,\n                payload: {\n                  error: error\n                }\n              });\n              throw error;\n            }));\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var insertToken = function insertToken() {\n  return function (dispatch) {\n    var token;\n\n    if (localStorage.getItem('auth')) {\n      token = JSON.parse(localStorage.getItem('auth'));\n      dispatch({\n        type: INSERT_TOKEN_SUCCESS,\n        payload: token\n      });\n    } else {\n      dispatch({\n        type: INSERT_TOKEN_FAIL\n      });\n    }\n  };\n};\nexport var POST_TOKEN_BEGIN = 'POST_TOKEN_BEGIN';\nexport var POST_TOKEN_SUCCESS = 'POST_TOKEN_SUCCESS';\nexport var POST_TOKEN_FAIL = 'POST_TOKEN_FAIL';\nexport var INSERT_TOKEN_SUCCESS = 'INSERT_TOKEN_SUCCESS';\nexport var INSERT_TOKEN_FAIL = 'INSERT_TOKEN_FAIL';","map":{"version":3,"sources":["D:/WS/reactws/ReactNativeEcommerce/src/redux/action/tokenAction.js"],"names":["login","postToken","email","password","dispatch","type","POST_TOKEN_BEGIN","then","res","console","log","POST_TOKEN_SUCCESS","payload","catch","error","POST_TOKEN_FAIL","insertToken","token","localStorage","getItem","JSON","parse","INSERT_TOKEN_SUCCESS","INSERT_TOKEN_FAIL"],"mappings":";AAAA,SAASA,KAAT;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,QAAR;AAAA,SAAqB,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAC5CA,YAAAA,QAAQ,CAAC;AAAEC,cAAAA,IAAI,EAAEC;AAAR,aAAD,CAAR;AAD4C;AAAA,6CAE/BN,KAAK,CAACE,KAAD,EAAQC,QAAR,CAAL,CAAuBI,IAAvB,CAA4B,UAAAC,GAAG,EAAI;AAC9CC,cAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,GAA/B;AACAJ,cAAAA,QAAQ,CAAC;AAAEC,gBAAAA,IAAI,EAAEM,kBAAR;AAA4BC,gBAAAA,OAAO,EAAEJ;AAArC,eAAD,CAAR;AACA,qBAAOA,GAAP;AACD,aAJY,EAIVK,KAJU,CAIJ,UAAAC,KAAK,EAAI;AAChBV,cAAAA,QAAQ,CAAC;AAAEC,gBAAAA,IAAI,EAAEU,eAAR;AAAyBH,gBAAAA,OAAO,EAAE;AAAEE,kBAAAA,KAAK,EAALA;AAAF;AAAlC,eAAD,CAAR;AACA,oBAAMA,KAAN;AACD,aAPY,CAF+B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;AAAA,CAAlB;AAYP,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc;AAAA,SAAM,UAAAZ,QAAQ,EAAI;AAC3C,QAAIa,KAAJ;;AACA,QAAIC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAJ,EAAkC;AAChCF,MAAAA,KAAK,GAAGG,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAR;AACAf,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEiB,oBAAR;AAA8BV,QAAAA,OAAO,EAAEK;AAAvC,OAAD,CAAR;AACD,KAHD,MAGO;AACLb,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEkB;AAAR,OAAD,CAAR;AACD;AACF,GAR0B;AAAA,CAApB;AAUP,OAAO,IAAMjB,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMK,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMI,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMO,oBAAoB,GAAG,sBAA7B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B","sourcesContent":["import { login } from '../../modules/serverCall'\r\n\r\nexport const postToken = (email, password) => async dispatch => {\r\n  dispatch({ type: POST_TOKEN_BEGIN })\r\n  return await login(email, password).then(res => {\r\n    console.log('tokenAction res', res);    \r\n    dispatch({ type: POST_TOKEN_SUCCESS, payload: res })\r\n    return res\r\n  }).catch(error => {\r\n    dispatch({ type: POST_TOKEN_FAIL, payload: { error } })\r\n    throw error\r\n  })\r\n}\r\n\r\nexport const insertToken = () => dispatch => {\r\n  let token\r\n  if (localStorage.getItem('auth')) {\r\n    token = JSON.parse(localStorage.getItem('auth'))\r\n    dispatch({ type: INSERT_TOKEN_SUCCESS, payload: token })\r\n  } else {\r\n    dispatch({ type: INSERT_TOKEN_FAIL })\r\n  }\r\n}\r\n\r\nexport const POST_TOKEN_BEGIN = 'POST_TOKEN_BEGIN'\r\nexport const POST_TOKEN_SUCCESS = 'POST_TOKEN_SUCCESS'\r\nexport const POST_TOKEN_FAIL = 'POST_TOKEN_FAIL'\r\nexport const INSERT_TOKEN_SUCCESS = 'INSERT_TOKEN_SUCCESS'\r\nexport const INSERT_TOKEN_FAIL = 'INSERT_TOKEN_FAIL'\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}