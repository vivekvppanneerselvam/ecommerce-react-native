{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar Validation = function () {\n  function Validation(assertion, rule, errMsg) {\n    _classCallCheck(this, Validation);\n\n    this.assertion = assertion;\n    this.rule = rule;\n    this.errMsg = errMsg;\n  }\n\n  _createClass(Validation, [{\n    key: \"check\",\n    value: function check(text) {\n      return this.rule(text);\n    }\n  }, {\n    key: \"errMsg\",\n    value: function errMsg() {\n      return this.errMsg;\n    }\n  }]);\n\n  return Validation;\n}();\n\nexport var validateExistence = new Validation('input should have value', function (text) {\n  return /\\S/.test(text);\n}, 'Required');\nexport var validateEmail = new Validation('input should be an email', function (text) {\n  return !!text.match(/[\\w-]+@([\\w-]+\\.)+[\\w-]+/i);\n}, 'invalid email');\nexport var validateLength = function validateLength(min_len, max_len) {\n  var regex = new RegExp(\"(?=.{\" + min_len + \",\" + max_len + \"})\", 'g');\n  return new Validation('input should within certain length', function (text) {\n    return !!text.match(regex);\n  }, \"password has to be \" + min_len + \"-\" + max_len + \" letter\");\n};\nexport var validateLowerCase = new Validation('input should have an uppercase', function (text) {\n  return !!text.match(/(?=.*[A-Z])/g);\n}, 'at least one upper case');\nexport var validateUpperCase = new Validation('input should have lowercase', function (text) {\n  return !!text.match(/(?=.*[a-z])/g);\n}, 'at least one lower case');","map":{"version":3,"sources":["D:/WS/reactws/ReactNativeEcommerce/src/utils/validation.js"],"names":["Validation","assertion","rule","errMsg","text","validateExistence","test","validateEmail","match","validateLength","min_len","max_len","regex","RegExp","validateLowerCase","validateUpperCase"],"mappings":";;;IAAMA,U;AACJ,sBAAYC,SAAZ,EAAuBC,IAAvB,EAA6BC,MAA7B,EAAqC;AAAA;;AACnC,SAAKF,SAAL,GAAiBA,SAAjB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;;;0BACKC,I,EAAM;AACV,aAAO,KAAKF,IAAL,CAAUE,IAAV,CAAP;AACD;;;6BACQ;AACP,aAAO,KAAKD,MAAZ;AACD;;;;;;AAGH,OAAO,IAAME,iBAAiB,GAAG,IAAIL,UAAJ,CAC/B,yBAD+B,EAE/B,UAAAI,IAAI;AAAA,SAAI,KAAKE,IAAL,CAAUF,IAAV,CAAJ;AAAA,CAF2B,EAG/B,UAH+B,CAA1B;AAKP,OAAO,IAAMG,aAAa,GAAG,IAAIP,UAAJ,CAC3B,0BAD2B,EAE3B,UAAAI,IAAI;AAAA,SAAI,CAAC,CAACA,IAAI,CAACI,KAAL,CAAW,2BAAX,CAAN;AAAA,CAFuB,EAG3B,eAH2B,CAAtB;AAKP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAUC,OAAV,EAAsB;AAClD,MAAMC,KAAK,GAAG,IAAIC,MAAJ,WAAmBH,OAAnB,SAA8BC,OAA9B,SAA2C,GAA3C,CAAd;AACA,SAAO,IAAIX,UAAJ,CACL,oCADK,EAEL,UAAAI,IAAI;AAAA,WAAI,CAAC,CAACA,IAAI,CAACI,KAAL,CAAWI,KAAX,CAAN;AAAA,GAFC,0BAGiBF,OAHjB,SAG4BC,OAH5B,aAAP;AAKD,CAPM;AAQP,OAAO,IAAMG,iBAAiB,GAAG,IAAId,UAAJ,CAC/B,gCAD+B,EAE/B,UAAAI,IAAI;AAAA,SAAI,CAAC,CAACA,IAAI,CAACI,KAAL,CAAW,cAAX,CAAN;AAAA,CAF2B,EAG/B,yBAH+B,CAA1B;AAKP,OAAO,IAAMO,iBAAiB,GAAG,IAAIf,UAAJ,CAC/B,6BAD+B,EAE/B,UAAAI,IAAI;AAAA,SAAI,CAAC,CAACA,IAAI,CAACI,KAAL,CAAW,cAAX,CAAN;AAAA,CAF2B,EAG/B,yBAH+B,CAA1B","sourcesContent":["class Validation {\r\n  constructor(assertion, rule, errMsg) {\r\n    this.assertion = assertion\r\n    this.rule = rule\r\n    this.errMsg = errMsg\r\n  }\r\n  check(text) {\r\n    return this.rule(text)\r\n  }\r\n  errMsg() {\r\n    return this.errMsg\r\n  }\r\n}\r\n\r\nexport const validateExistence = new Validation(\r\n  'input should have value',\r\n  text => /\\S/.test(text),\r\n  'Required'\r\n)\r\nexport const validateEmail = new Validation(\r\n  'input should be an email',\r\n  text => !!text.match(/[\\w-]+@([\\w-]+\\.)+[\\w-]+/i),\r\n  'invalid email'\r\n)\r\nexport const validateLength = (min_len, max_len) => {\r\n  const regex = new RegExp(`(?=.{${min_len},${max_len}})`, 'g')\r\n  return new Validation(\r\n    'input should within certain length',\r\n    text => !!text.match(regex),\r\n    `password has to be ${min_len}-${max_len} letter`\r\n  )\r\n}\r\nexport const validateLowerCase = new Validation(\r\n  'input should have an uppercase',\r\n  text => !!text.match(/(?=.*[A-Z])/g),\r\n  'at least one upper case'\r\n)\r\nexport const validateUpperCase = new Validation(\r\n  'input should have lowercase',\r\n  text => !!text.match(/(?=.*[a-z])/g),\r\n  'at least one lower case'\r\n)"]},"metadata":{},"sourceType":"module"}