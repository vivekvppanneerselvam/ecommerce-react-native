{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport serverCall from \"../../modules/serverCall\";\nimport Auth from \"../../modules/Auth\";\nexport function getCartByUserId() {\n  return function _callee(dispatch) {\n    var userId;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Auth.getUserId());\n\n          case 2:\n            userId = _context.sent;\n            dispatch({\n              type: GET_CART_BY_USERID_BEGIN\n            });\n            return _context.abrupt(\"return\", serverCall({\n              method: 'GET',\n              url: userId + \"/cart\"\n            }).then(function (res) {\n              dispatch({\n                type: GET_CART_BY_USERID_SUCCESS,\n                payload: res\n              });\n              return res;\n            }).catch(function (error) {\n              dispatch({\n                type: GET_CART_BY_USERID_FAIL,\n                payload: {\n                  error: error\n                }\n              });\n              return error;\n            }));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n}\nexport function postCart(productId, increase, decrease) {\n  return function _callee2(dispatch) {\n    var userId;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(Auth.getUserId());\n\n          case 2:\n            userId = _context2.sent;\n            dispatch({\n              type: POST_CART_BEGIN\n            });\n            return _context2.abrupt(\"return\", serverCall({\n              method: 'POST',\n              url: userId + \"/cart\",\n              data: {\n                userId: userId,\n                productId: productId,\n                increase: increase,\n                decrease: decrease\n              }\n            }).then(function (res) {\n              dispatch({\n                type: POST_CART_SUCCESS,\n                payload: res\n              });\n              return res;\n            }).catch(function (error) {\n              dispatch({\n                type: POST_CART_FAIL,\n                payload: {\n                  error: error\n                }\n              });\n              return error;\n            }));\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n}\nexport var POST_CART_BEGIN = 'POST_CART_BEGIN';\nexport var POST_CART_SUCCESS = 'POST_CART_SUCCESS';\nexport var POST_CART_FAIL = 'POST_CART_FAIL';\nexport var GET_CART_BY_USERID_BEGIN = 'GET_CART_BY_USERID_BEGIN';\nexport var GET_CART_BY_USERID_SUCCESS = 'GET_CART_BY_USERID_SUCCESS';\nexport var GET_CART_BY_USERID_FAIL = 'GET_CART_BY_USERID_FAIL';","map":{"version":3,"sources":["D:/WS/reactws/ReactNativeEcommerce/src/redux/action/cartAction.js"],"names":["serverCall","Auth","getCartByUserId","dispatch","getUserId","userId","type","GET_CART_BY_USERID_BEGIN","method","url","then","res","GET_CART_BY_USERID_SUCCESS","payload","catch","error","GET_CART_BY_USERID_FAIL","postCart","productId","increase","decrease","POST_CART_BEGIN","data","POST_CART_SUCCESS","POST_CART_FAIL"],"mappings":";AAAA,OAAOA,UAAP;AACA,OAAOC,IAAP;AAGA,OAAQ,SAASC,eAAT,GAA2B;AACjC,SAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACcF,IAAI,CAACG,SAAL,EADd;;AAAA;AACDC,YAAAA,MADC;AAELF,YAAAA,QAAQ,CAAC;AAAEG,cAAAA,IAAI,EAAEC;AAAR,aAAD,CAAR;AAFK,6CAGEP,UAAU,CAAC;AAAEQ,cAAAA,MAAM,EAAE,KAAV;AAAiBC,cAAAA,GAAG,EAAKJ,MAAL;AAApB,aAAD,CAAV,CACJK,IADI,CACC,UAAAC,GAAG,EAAI;AACXR,cAAAA,QAAQ,CAAC;AAAEG,gBAAAA,IAAI,EAAEM,0BAAR;AAAoCC,gBAAAA,OAAO,EAAEF;AAA7C,eAAD,CAAR;AACA,qBAAOA,GAAP;AACD,aAJI,EAIFG,KAJE,CAII,UAAAC,KAAK,EAAI;AAChBZ,cAAAA,QAAQ,CAAC;AAAEG,gBAAAA,IAAI,EAAEU,uBAAR;AAAiCH,gBAAAA,OAAO,EAAE;AAAEE,kBAAAA,KAAK,EAALA;AAAF;AAA1C,eAAD,CAAR;AACA,qBAAOA,KAAP;AACD,aAPI,CAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAYD;AAED,OAAQ,SAASE,QAAT,CAAkBC,SAAlB,EAA6BC,QAA7B,EAAuCC,QAAvC,EAAiD;AACvD,SAAO,kBAAOjB,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACcF,IAAI,CAACG,SAAL,EADd;;AAAA;AACDC,YAAAA,MADC;AAELF,YAAAA,QAAQ,CAAC;AACPG,cAAAA,IAAI,EAAEe;AADC,aAAD,CAAR;AAFK,8CAKErB,UAAU,CAAC;AAChBQ,cAAAA,MAAM,EAAE,MADQ;AACAC,cAAAA,GAAG,EAAKJ,MAAL,UADH;AACuBiB,cAAAA,IAAI,EAAE;AAC3CjB,gBAAAA,MAAM,EAANA,MAD2C;AACnCa,gBAAAA,SAAS,EAATA,SADmC;AACxBC,gBAAAA,QAAQ,EAARA,QADwB;AACdC,gBAAAA,QAAQ,EAARA;AADc;AAD7B,aAAD,CAAV,CAIJV,IAJI,CAIC,UAAAC,GAAG,EAAI;AACbR,cAAAA,QAAQ,CAAC;AAAEG,gBAAAA,IAAI,EAAEiB,iBAAR;AAA2BV,gBAAAA,OAAO,EAAEF;AAApC,eAAD,CAAR;AACA,qBAAOA,GAAP;AACD,aAPM,EAOJG,KAPI,CAOE,UAAAC,KAAK,EAAI;AAChBZ,cAAAA,QAAQ,CAAC;AAAEG,gBAAAA,IAAI,EAAEkB,cAAR;AAAwBX,gBAAAA,OAAO,EAAE;AAAEE,kBAAAA,KAAK,EAALA;AAAF;AAAjC,eAAD,CAAR;AACA,qBAAOA,KAAP;AACD,aAVM,CALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAiBD;AAED,OAAO,IAAMM,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAME,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,IAAMjB,wBAAwB,GAAG,0BAAjC;AACP,OAAO,IAAMK,0BAA0B,GAAG,4BAAnC;AACP,OAAO,IAAMI,uBAAuB,GAAG,yBAAhC","sourcesContent":["import serverCall from '../../modules/serverCall'\r\nimport Auth from '../../modules/Auth';\r\n\r\n\r\nexport  function getCartByUserId() {\r\n  return async dispatch => {\r\n    let userId = await Auth.getUserId()\r\n    dispatch({ type: GET_CART_BY_USERID_BEGIN })\r\n    return serverCall({ method: 'GET', url: `${userId}/cart` })\r\n      .then(res => {\r\n        dispatch({ type: GET_CART_BY_USERID_SUCCESS, payload: res })\r\n        return res\r\n      }).catch(error => {\r\n        dispatch({ type: GET_CART_BY_USERID_FAIL, payload: { error } })\r\n        return error\r\n      })\r\n  }\r\n}\r\n\r\nexport  function postCart(productId, increase, decrease) {\r\n  return async (dispatch) => {\r\n    let userId = await Auth.getUserId()\r\n    dispatch({\r\n      type: POST_CART_BEGIN\r\n    })\r\n    return serverCall({\r\n      method: 'POST', url: `${userId}/cart`, data: {\r\n        userId, productId, increase, decrease\r\n      }\r\n    }).then(res => {\r\n      dispatch({ type: POST_CART_SUCCESS, payload: res })\r\n      return res\r\n    }).catch(error => {\r\n      dispatch({ type: POST_CART_FAIL, payload: { error } })\r\n      return error\r\n    })\r\n  }\r\n}\r\n\r\nexport const POST_CART_BEGIN = 'POST_CART_BEGIN'\r\nexport const POST_CART_SUCCESS = 'POST_CART_SUCCESS'\r\nexport const POST_CART_FAIL = 'POST_CART_FAIL'\r\n\r\nexport const GET_CART_BY_USERID_BEGIN = 'GET_CART_BY_USERID_BEGIN'\r\nexport const GET_CART_BY_USERID_SUCCESS = 'GET_CART_BY_USERID_SUCCESS'\r\nexport const GET_CART_BY_USERID_FAIL = 'GET_CART_BY_USERID_FAIL'"]},"metadata":{},"sourceType":"module"}