{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Auth from \"../Auth\";\nimport axios from 'axios';\nimport qs from 'qs';\nimport paypalConfig from \"../../configs/paypalConfig\";\nvar URL = 'http://localhost:3000';\n\nvar serverCall = function serverCall(config) {\n  var token;\n  return _regeneratorRuntime.async(function serverCall$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!Auth.user_token) {\n            _context.next = 5;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Auth.getToken());\n\n        case 3:\n          token = _context.sent;\n          config.headers = {\n            \"authorization\": token\n          };\n\n        case 5:\n          axios.interceptors.response.use(function (response) {\n            return response;\n          }, function (error) {\n            if (!error.response) {\n              error.response = {\n                data: 'net work error',\n                status: 500\n              };\n            }\n\n            if (error.response.status === 401) {\n              Auth.logout();\n              throw error;\n            }\n\n            return Promise.reject(error);\n          });\n          config.baseURL = URL;\n          return _context.abrupt(\"return\", axios(config));\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default serverCall;\nexport var login = function login(email, password) {\n  var body = {\n    \"credential\": {\n      \"email\": email,\n      \"password\": password\n    }\n  };\n  return serverCall({\n    method: 'POST',\n    url: '/login',\n    data: body\n  }).then(function _callee(res) {\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(Auth.setUserToken(res.data.user_token));\n\n          case 2:\n            return _context2.abrupt(\"return\", res.data);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};\nexport var getPaypalToken = function getPaypalToken() {\n  return axios({\n    method: 'POST',\n    url: 'https://api.sandbox.paypal.com/v1/oauth2/token',\n    headers: {\n      'content-type': 'application/x-www-form-urlencoded'\n    },\n    auth: {\n      username: paypalConfig.username,\n      password: paypalConfig.password\n    },\n    data: qs.stringify({\n      \"grant_type\": \"client_credentials\"\n    })\n  });\n};","map":{"version":3,"sources":["D:/WS/reactws/ReactNativeEcommerce/src/modules/serverCall/index.js"],"names":["Auth","axios","qs","paypalConfig","URL","serverCall","config","user_token","getToken","token","headers","interceptors","response","use","error","data","status","logout","Promise","reject","baseURL","login","email","password","body","method","url","then","res","setUserToken","getPaypalToken","auth","username","stringify"],"mappings":";AAAA,OAAOA,IAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,YAAP;AAEA,IAAMC,GAAG,GAAG,uBAAZ;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEbN,IAAI,CAACO,UAFQ;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAGKP,IAAI,CAACQ,QAAL,EAHL;;AAAA;AAGTC,UAAAA,KAHS;AAIfH,UAAAA,MAAM,CAACI,OAAP,GAAiB;AACf,6BAAiBD;AADF,WAAjB;;AAJe;AASjBR,UAAAA,KAAK,CAACU,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CACE,UAACD,QAAD,EAAc;AACZ,mBAAOA,QAAP;AACD,WAHH,EAIE,UAAUE,KAAV,EAAiB;AACf,gBAAI,CAACA,KAAK,CAACF,QAAX,EAAqB;AACnBE,cAAAA,KAAK,CAACF,QAAN,GAAiB;AACfG,gBAAAA,IAAI,EAAE,gBADS;AAEfC,gBAAAA,MAAM,EAAE;AAFO,eAAjB;AAID;;AACD,gBAAIF,KAAK,CAACF,QAAN,CAAeI,MAAf,KAA0B,GAA9B,EAAmC;AACjChB,cAAAA,IAAI,CAACiB,MAAL;AAEA,oBAAMH,KAAN;AACD;;AACD,mBAAOI,OAAO,CAACC,MAAR,CAAeL,KAAf,CAAP;AACD,WAjBH;AAkBAR,UAAAA,MAAM,CAACc,OAAP,GAAiBhB,GAAjB;AA3BiB,2CA4BVH,KAAK,CAACK,MAAD,CA5BK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AA8BA,eAAeD,UAAf;AAEA,OAAO,IAAMgB,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAQC,QAAR,EAAqB;AACxC,MAAMC,IAAI,GACV;AACE,kBAAc;AACZ,eAASF,KADG;AAEZ,kBAAYC;AAFA;AADhB,GADA;AAOA,SAAOlB,UAAU,CAAC;AAAEoB,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,GAAG,EAAE,QAAvB;AAAiCX,IAAAA,IAAI,EAAES;AAAvC,GAAD,CAAV,CAA0DG,IAA1D,CAA+D,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAC9D5B,IAAI,CAAC6B,YAAL,CAAkBD,GAAG,CAACb,IAAJ,CAASR,UAA3B,CAD8D;;AAAA;AAAA,8CAE7DqB,GAAG,CAACb,IAFyD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/D,CAAP;AAID,CAZM;AAcP,OAAO,IAAMe,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC,SAAO7B,KAAK,CAAC;AACXwB,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,GAAG,EAAE,gDAFM;AAGXhB,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAHE;AAIXqB,IAAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE7B,YAAY,CAAC6B,QADnB;AAEJT,MAAAA,QAAQ,EAAEpB,YAAY,CAACoB;AAFnB,KAJK;AAQXR,IAAAA,IAAI,EAAEb,EAAE,CAAC+B,SAAH,CAAa;AAAE,oBAAc;AAAhB,KAAb;AARK,GAAD,CAAZ;AAUD,CAXM","sourcesContent":["import Auth from '../Auth'\r\nimport axios from 'axios'\r\nimport qs from 'qs'\r\nimport paypalConfig from '../../configs/paypalConfig'\r\n\r\nconst URL = 'http://localhost:3000'\r\n\r\nconst serverCall = async (config) => {\r\n  //header authorization\r\n  if (Auth.user_token) {\r\n    const token = await Auth.getToken()\r\n    config.headers = {\r\n      \"authorization\": token\r\n    }\r\n  }\r\n  //interceptors handle network error\r\n  axios.interceptors.response.use(\r\n    (response) => {\r\n      return response;\r\n    },\r\n    function (error) {\r\n      if (!error.response) {\r\n        error.response = {\r\n          data: 'net work error',\r\n          status: 500\r\n        }\r\n      }\r\n      if (error.response.status === 401) {\r\n        Auth.logout()\r\n        // jumpTo('/login')\r\n        throw error\r\n      }\r\n      return Promise.reject(error);\r\n    });\r\n  config.baseURL = URL\r\n  return axios(config)\r\n}\r\nexport default serverCall\r\n\r\nexport const login = (email, password) => {\r\n  const body =\r\n  {\r\n    \"credential\": {\r\n      \"email\": email,\r\n      \"password\": password\r\n    }\r\n  }\r\n  return serverCall({ method: 'POST', url: '/login', data: body }).then(async (res) => {\r\n    await Auth.setUserToken(res.data.user_token)\r\n    return res.data\r\n  })\r\n}\r\n\r\nexport const getPaypalToken = () => {\r\n  return axios({\r\n    method: 'POST',\r\n    url: 'https://api.sandbox.paypal.com/v1/oauth2/token',\r\n    headers: { 'content-type': 'application/x-www-form-urlencoded' },\r\n    auth: {\r\n      username: paypalConfig.username,\r\n      password: paypalConfig.password\r\n    },\r\n    data: qs.stringify({ \"grant_type\": \"client_credentials\" })\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}